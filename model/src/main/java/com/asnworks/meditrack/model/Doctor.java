/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.asnworks.meditrack.model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Doctor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3106792251571188034L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Doctor\",\"namespace\":\"com.asnworks.meditrack.model\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"medicalRegistrationNumber\",\"type\":\"string\"},{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"specialisation\",\"type\":\"string\"},{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"phoneNumber\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence medicalRegistrationNumber;
  @Deprecated public java.lang.CharSequence firstName;
  @Deprecated public java.lang.CharSequence lastName;
  @Deprecated public java.lang.CharSequence gender;
  @Deprecated public java.lang.CharSequence specialisation;
  @Deprecated public java.lang.CharSequence address;
  @Deprecated public java.lang.CharSequence phoneNumber;
  @Deprecated public java.lang.CharSequence email;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Doctor() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param medicalRegistrationNumber The new value for medicalRegistrationNumber
   * @param firstName The new value for firstName
   * @param lastName The new value for lastName
   * @param gender The new value for gender
   * @param specialisation The new value for specialisation
   * @param address The new value for address
   * @param phoneNumber The new value for phoneNumber
   * @param email The new value for email
   */
  public Doctor(java.lang.Integer id, java.lang.CharSequence medicalRegistrationNumber, java.lang.CharSequence firstName, java.lang.CharSequence lastName, java.lang.CharSequence gender, java.lang.CharSequence specialisation, java.lang.CharSequence address, java.lang.CharSequence phoneNumber, java.lang.CharSequence email) {
    this.id = id;
    this.medicalRegistrationNumber = medicalRegistrationNumber;
    this.firstName = firstName;
    this.lastName = lastName;
    this.gender = gender;
    this.specialisation = specialisation;
    this.address = address;
    this.phoneNumber = phoneNumber;
    this.email = email;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return medicalRegistrationNumber;
    case 2: return firstName;
    case 3: return lastName;
    case 4: return gender;
    case 5: return specialisation;
    case 6: return address;
    case 7: return phoneNumber;
    case 8: return email;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: medicalRegistrationNumber = (java.lang.CharSequence)value$; break;
    case 2: firstName = (java.lang.CharSequence)value$; break;
    case 3: lastName = (java.lang.CharSequence)value$; break;
    case 4: gender = (java.lang.CharSequence)value$; break;
    case 5: specialisation = (java.lang.CharSequence)value$; break;
    case 6: address = (java.lang.CharSequence)value$; break;
    case 7: phoneNumber = (java.lang.CharSequence)value$; break;
    case 8: email = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'medicalRegistrationNumber' field.
   * @return The value of the 'medicalRegistrationNumber' field.
   */
  public java.lang.CharSequence getMedicalRegistrationNumber() {
    return medicalRegistrationNumber;
  }

  /**
   * Sets the value of the 'medicalRegistrationNumber' field.
   * @param value the value to set.
   */
  public void setMedicalRegistrationNumber(java.lang.CharSequence value) {
    this.medicalRegistrationNumber = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return The value of the 'firstName' field.
   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }

  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }

  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'gender' field.
   * @return The value of the 'gender' field.
   */
  public java.lang.CharSequence getGender() {
    return gender;
  }

  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(java.lang.CharSequence value) {
    this.gender = value;
  }

  /**
   * Gets the value of the 'specialisation' field.
   * @return The value of the 'specialisation' field.
   */
  public java.lang.CharSequence getSpecialisation() {
    return specialisation;
  }

  /**
   * Sets the value of the 'specialisation' field.
   * @param value the value to set.
   */
  public void setSpecialisation(java.lang.CharSequence value) {
    this.specialisation = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.CharSequence getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.CharSequence value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'phoneNumber' field.
   * @return The value of the 'phoneNumber' field.
   */
  public java.lang.CharSequence getPhoneNumber() {
    return phoneNumber;
  }

  /**
   * Sets the value of the 'phoneNumber' field.
   * @param value the value to set.
   */
  public void setPhoneNumber(java.lang.CharSequence value) {
    this.phoneNumber = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Creates a new Doctor RecordBuilder.
   * @return A new Doctor RecordBuilder
   */
  public static com.asnworks.meditrack.model.Doctor.Builder newBuilder() {
    return new com.asnworks.meditrack.model.Doctor.Builder();
  }

  /**
   * Creates a new Doctor RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Doctor RecordBuilder
   */
  public static com.asnworks.meditrack.model.Doctor.Builder newBuilder(com.asnworks.meditrack.model.Doctor.Builder other) {
    return new com.asnworks.meditrack.model.Doctor.Builder(other);
  }

  /**
   * Creates a new Doctor RecordBuilder by copying an existing Doctor instance.
   * @param other The existing instance to copy.
   * @return A new Doctor RecordBuilder
   */
  public static com.asnworks.meditrack.model.Doctor.Builder newBuilder(com.asnworks.meditrack.model.Doctor other) {
    return new com.asnworks.meditrack.model.Doctor.Builder(other);
  }

  /**
   * RecordBuilder for Doctor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Doctor>
    implements org.apache.avro.data.RecordBuilder<Doctor> {

    private int id;
    private java.lang.CharSequence medicalRegistrationNumber;
    private java.lang.CharSequence firstName;
    private java.lang.CharSequence lastName;
    private java.lang.CharSequence gender;
    private java.lang.CharSequence specialisation;
    private java.lang.CharSequence address;
    private java.lang.CharSequence phoneNumber;
    private java.lang.CharSequence email;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.asnworks.meditrack.model.Doctor.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.medicalRegistrationNumber)) {
        this.medicalRegistrationNumber = data().deepCopy(fields()[1].schema(), other.medicalRegistrationNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.firstName)) {
        this.firstName = data().deepCopy(fields()[2].schema(), other.firstName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastName)) {
        this.lastName = data().deepCopy(fields()[3].schema(), other.lastName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gender)) {
        this.gender = data().deepCopy(fields()[4].schema(), other.gender);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.specialisation)) {
        this.specialisation = data().deepCopy(fields()[5].schema(), other.specialisation);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.address)) {
        this.address = data().deepCopy(fields()[6].schema(), other.address);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[7].schema(), other.phoneNumber);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.email)) {
        this.email = data().deepCopy(fields()[8].schema(), other.email);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Doctor instance
     * @param other The existing instance to copy.
     */
    private Builder(com.asnworks.meditrack.model.Doctor other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.medicalRegistrationNumber)) {
        this.medicalRegistrationNumber = data().deepCopy(fields()[1].schema(), other.medicalRegistrationNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.firstName)) {
        this.firstName = data().deepCopy(fields()[2].schema(), other.firstName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastName)) {
        this.lastName = data().deepCopy(fields()[3].schema(), other.lastName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gender)) {
        this.gender = data().deepCopy(fields()[4].schema(), other.gender);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.specialisation)) {
        this.specialisation = data().deepCopy(fields()[5].schema(), other.specialisation);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.address)) {
        this.address = data().deepCopy(fields()[6].schema(), other.address);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[7].schema(), other.phoneNumber);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.email)) {
        this.email = data().deepCopy(fields()[8].schema(), other.email);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'medicalRegistrationNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getMedicalRegistrationNumber() {
      return medicalRegistrationNumber;
    }

    /**
      * Sets the value of the 'medicalRegistrationNumber' field.
      * @param value The value of 'medicalRegistrationNumber'.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder setMedicalRegistrationNumber(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.medicalRegistrationNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'medicalRegistrationNumber' field has been set.
      * @return True if the 'medicalRegistrationNumber' field has been set, false otherwise.
      */
    public boolean hasMedicalRegistrationNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'medicalRegistrationNumber' field.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder clearMedicalRegistrationNumber() {
      medicalRegistrationNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }

    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.firstName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }

    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.lastName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'gender' field.
      * @return The value.
      */
    public java.lang.CharSequence getGender() {
      return gender;
    }

    /**
      * Sets the value of the 'gender' field.
      * @param value The value of 'gender'.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder setGender(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.gender = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'gender' field has been set.
      * @return True if the 'gender' field has been set, false otherwise.
      */
    public boolean hasGender() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'gender' field.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder clearGender() {
      gender = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'specialisation' field.
      * @return The value.
      */
    public java.lang.CharSequence getSpecialisation() {
      return specialisation;
    }

    /**
      * Sets the value of the 'specialisation' field.
      * @param value The value of 'specialisation'.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder setSpecialisation(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.specialisation = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'specialisation' field has been set.
      * @return True if the 'specialisation' field has been set, false otherwise.
      */
    public boolean hasSpecialisation() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'specialisation' field.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder clearSpecialisation() {
      specialisation = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder setAddress(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.address = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder clearAddress() {
      address = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'phoneNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getPhoneNumber() {
      return phoneNumber;
    }

    /**
      * Sets the value of the 'phoneNumber' field.
      * @param value The value of 'phoneNumber'.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder setPhoneNumber(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.phoneNumber = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'phoneNumber' field has been set.
      * @return True if the 'phoneNumber' field has been set, false otherwise.
      */
    public boolean hasPhoneNumber() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'phoneNumber' field.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder clearPhoneNumber() {
      phoneNumber = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }

    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.email = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.asnworks.meditrack.model.Doctor.Builder clearEmail() {
      email = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public Doctor build() {
      try {
        Doctor record = new Doctor();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.medicalRegistrationNumber = fieldSetFlags()[1] ? this.medicalRegistrationNumber : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.firstName = fieldSetFlags()[2] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.lastName = fieldSetFlags()[3] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.gender = fieldSetFlags()[4] ? this.gender : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.specialisation = fieldSetFlags()[5] ? this.specialisation : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.address = fieldSetFlags()[6] ? this.address : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.phoneNumber = fieldSetFlags()[7] ? this.phoneNumber : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.email = fieldSetFlags()[8] ? this.email : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
